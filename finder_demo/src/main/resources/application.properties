//Veritaban? ba?lant?s? için 
spring.datasource.url=jdbc:sqlserver://{google-cloud-sql-ip}:1433;databaseName={database-name}
spring.datasource.username={database-username}
spring.datasource.password={database-password}
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver


{google-cloud-sql-ip} k?sm?n?, Google Cloud SQL ba?lant? IP adresi ile de?i?tirin.
{database-name} k?sm?n?, kullanmak istedi?iniz veritaban?n?n ad? ile de?i?tirin.
{database-username} ve {database-password} k?s?mlar?n?, MSSQL veritaban? kullan?c? ad? ve ?ifrenizle de?i?tirin.




Spring Boot Uygulaman?zda Veritaban?na Eri?in:
Spring Boot uygulaman?zda, veritaban?na eri?im sa?layacak olan repository, service veya controller s?n?flar?n?z? yaz?n.\
  \ Veritaban?na eri?im için Spring Data JPA veya JDBC kullanabilirsiniz.

Örne?in, bir Spring Data JPA repository s?n?f?:

java
Copy code
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
// Repository metotlar? buraya eklenecek
}
Burada User s?n?f?, veritaban?ndaki "users" tablosunu temsil eder.

Bu ad?mlar? takip ederek, Spring Boot uygulaman?z? Google Cloud'da bulunan bir MSSQL veritaban?na ba?layabilirsiniz. \
  Unutmay?n ki gerçekle?tirece?iniz bu ba?lant? için gerekli olan bilgileri do?ru bir ?ekilde sa?lamak önemlidir.




spring.jpa.properties.hibernate.format_sql=true
spring.datasource.url= jdbc:sqlserver://localhost:8080;encrypt=true;trustServerCertificate=true;databaseName=URUN
spring.datasource.username=isdemir
spring.datasource.password=2021

spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.SQLServerDialect
spring.jpa.hibernate.ddl-auto= update

# application.properties

spring.resources.generated-locations=frontend/generated/